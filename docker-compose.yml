services:
  recy-postgres:
    image: postgres:16
    container_name: recy-postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-volume:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    env_file:
      - .env
    networks:
      - recy-network

  recy-backend:
    build: .
    container_name: recy-backend
    restart: always
    ports:
      - '80:80'
    environment:
      - DATADOG_HOST=datadog
      - DD_AGENT_HOST=dd-agent
      - DD_ENV=${DD_ENV}
      - DD_SERVICE=${DD_SERVICE}
      - DD_VERSION=${DD_VERSION}
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://localhost:80/health']
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 20s
    depends_on:
      - recy-postgres
      - recy-redis
    env_file:
      - .env
    networks:
      - recy-network

  recy-redis:
    image: redis:7-alpine
    container_name: recy-redis
    restart: always
    ports:
      - '6379:6379'
    networks:
      - recy-network

  datadog:
    container_name: dd-agent
    image: gcr.io/datadoghq/agent:7
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=datadoghq.com
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_AGENT_HOST=dd-agent
    env_file:
      - .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc:/host/proc:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - recy-network
    restart: always

volumes:
  postgres-volume:
    external: false

networks:
  recy-network:
    external: false
