// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ResidueType {
  GLASS
  METAL
  ORGANIC
  PAPER
  PLASTIC
  TEXTILE
  LANDFILL_WASTE
}

model User {
  id              BigInt            @id @default(autoincrement())
  name            String
  email           String            @unique
  phone           String?
  walletAddress   String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  recyclers       Recycler[]        @relation("UserRecycler")
  partners        Partner[]         @relation("UserPartner")
  wasteGenerators WasteGenerator[]  @relation("UserWasteGenerator")
  recyclingReports RecyclingReport[] @relation("UserRecyclingReport")
  auditors        Auditor[]         @relation("UserAuditor")
}

model Recycler {
  id                BigInt    @id @default(autoincrement())
  userId            BigInt @unique
  organizationName  String?
  phone             String?
  walletAddress     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt

  user              User      @relation("UserRecycler", fields: [userId], references: [id])
}

model Partner {
  id                BigInt    @id @default(autoincrement())
  userId            BigInt @unique
  organizationName  String?
  phone             String?
  walletAddress     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt

  user              User      @relation("UserPartner", fields: [userId], references: [id])
}

model WasteGenerator {
  id                BigInt    @id @default(autoincrement())
  userId            BigInt @unique
  organizationName  String?
  phone             String?
  walletAddress     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt

  user              User      @relation("UserWasteGenerator", fields: [userId], references: [id])
}

model RecyclingReport {
  id              BigInt    @id @default(autoincrement())
  submittedBy     BigInt
  reportDate      DateTime  @default(now())
  audited         Boolean   @default(false)
  phone           String?
  materials       Json
  walletAddress   String?
  evidenceUrl     String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt

  user            User      @relation("UserRecyclingReport", fields: [submittedBy], references: [id])
  audits          Audit[]   @relation("ReportAudits")
}

model Auditor {
  id              BigInt    @id @default(autoincrement())
  userId          BigInt @unique
  organizationName  String?
  phone           String?
  walletAddress   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt

  user            User      @relation("UserAuditor", fields: [userId], references: [id])
  audits          Audit[]   @relation("AuditorAudits")
}

model Audit {
  id              BigInt    @id @default(autoincrement())
  reportId        BigInt
  auditorId       BigInt
  audited         Boolean   @default(false)
  comments        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt

  recyclingReport RecyclingReport @relation("ReportAudits", fields: [reportId], references: [id])
  auditor         Auditor         @relation("AuditorAudits", fields: [auditorId], references: [id])
}
